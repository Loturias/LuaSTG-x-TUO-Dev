apply plugin: 'com.android.application'

android {
    namespace "org.cocos.game"
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    ndkVersion "26.3.11579264"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    defaultConfig {
        applicationId "com.xrysnow.lstgx"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_shared", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE", "-DANDROID_LD=gold"
                cppFlags "-frtti -fexceptions -fsigned-char -std=c++17"
            }
            ndk {
                abiFilters PROP_APP_ABI.split(':')
            }
        }

        ndk {
            abiFilters PROP_APP_ABI.split(':')
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
        jniLibs {
            // Vulkan validation layer
            // srcDir "${android.ndkDirectory}/sources/third_party/vulkan/src/build-android/jniLibs"
        }
    }

    externalNativeBuild {
        cmake {
            path "../../../../CMakeLists.txt"
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            // renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable true
            jniDebuggable true
            // renderscriptDebuggable true
            signingConfig signingConfigs.debug
        }
    }

    aaptOptions {
        noCompress 'mp3','ogg','wav','mp4','ttf','ttc'
    }
}

// a method used to invoke the cocos luacompile command
def compileLua(srcDir, dstDir, doCompile, is64bit, doEncrypt) {
}

android.applicationVariants.all { variant ->
    def project_root_folder = "${projectDir}/../../../.."
    def dest_assets_folder = "${projectDir}/assets"

    // delete previous files first
    delete dest_assets_folder

    def targetName = variant.name.capitalize()
    def copyTaskName = "copy${targetName}ResourcesToAssets"
   
    tasks.register(copyTaskName) {
        copy {
           from project_root_folder + "/res"
           into dest_assets_folder + "/res"
           exclude '*.bat'
        }

        copy {
            from project_root_folder + "/src"
            into dest_assets_folder + "/src"
           exclude '*.bat'
           exclude '**/.idea/*'
        }

        // copy {
        //     from "${projectDir}/../../../cocos2d-x/cocos/scripting/lua-bindings/script"
        //     into  dest_assets_folder + "/src/cocos"
        // }

        // compile & encrypt the scripts if necessary
        def compileScript = (variant.name.compareTo('release') == 0)
        if (project.hasProperty('PROP_COMPILE_SCRIPT')) {
            compileScript = (PROP_COMPILE_SCRIPT.compareTo('1') == 0)
        }
        compileScript = false

        def encryptLua = project.hasProperty('PROP_LUA_ENCRYPT') && (PROP_LUA_ENCRYPT.compareTo('1') == 0)
		encryptLua = false
        if (compileScript || encryptLua) {
            // -1 means not build bytecode
            // 0 means build 32bit only
            // 1 means build 64bit only
            // 2 means build both 32bit & 64bit
            def buildType = -1
        }
    }
    tasks.getByName("pre${targetName}Build").dependsOn copyTaskName
}

dependencies {
    implementation fileTree(dir: '../libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: "../../../cocos2d-x/cocos/platform/android/java/libs", include: ['*.jar'])
    implementation project(':libcocos2dx')
    //implementation project(':libcocos')
}

project.afterEvaluate {
    if (tasks.findByName("externalNativeBuildDebug")) {
        compileDebugJavaWithJavac.dependsOn externalNativeBuildDebug
    }
    if (tasks.findByName("externalNativeBuildRelease")) {
        compileReleaseJavaWithJavac.dependsOn externalNativeBuildRelease
    }
}
